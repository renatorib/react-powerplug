// @flow

import * as React from "react";

/* Active */

type ActiveChange = ({| isActive: boolean |}) => void;

type ActiveRender = ({|
  isActive: boolean,
  bindActive: {| onMouseDown: () => void, onMouseUp: () => void |}
|}) => React.Node;

declare export var Active: React.ComponentType<
  | {| onChange?: ActiveChange, render: ActiveRender |}
  | {| onChange?: ActiveChange, children: ActiveRender |}
>;

/* Bind */

type BindChange = ({| value: string |}) => void;

type BindRender = ({|
  value: string,
  setValue: string => void,
  bind: {| value: string, onChange: (SyntheticInputEvent<*>) => void |}
|}) => React.Node;

declare export var Bind: React.ComponentType<
  | {| initial?: string, onChange?: BindChange, render: BindRender |}
  | {| initial?: string, onChange?: BindChange, children: BindRender |}
>;

/* Compose */

declare export var Compose: React.ComponentType<Object>;

/* Counter */

type CounterChange = ({| count: number |}) => void;

type CounterRender = ({|
  count: number,
  inc: (step?: number) => void,
  dec: (step?: number) => void
|}) => React.Node;

declare export var Counter: React.ComponentType<
  | {| initial?: number, onChange?: CounterChange, render: CounterRender |}
  | {| initial?: number, onChange?: CounterChange, children: CounterRender |}
>;

/* Focus */

type FocusChange = ({| isFocus: boolean |}) => void;

type FocusRender = ({|
  isFocus: boolean,
  bindFocus: {| onFocusIn: () => void, onFocusOut: () => void |}
|}) => React.Node;

declare export var Focus: React.ComponentType<
  | {| onChange?: FocusChange, render: FocusRender |}
  | {| onChange?: FocusChange, children: FocusRender |}
>;

/* Form */

type FormChange<T> = T => void;

type FormRender<T> = ({|
  input: <K: $Keys<T>>(
    key: K
  ) => {|
    value: string,
    setValue: string => void,
    bind: {|
      value: string,
      onChange: (SyntheticInputEvent<*>) => void
    |}
  |}
|}) => React.Node;

type FormProps<T> =
  | {| initial: T, onChange?: FormChange<T>, render: FormRender<T> |}
  | {| initial: T, onChange?: FormChange<T>, children: FormRender<T> |};

declare export class Form<T: { [string]: string }> extends React.Component<
  FormProps<T>,
  *
> {}

/* Hover */

type HoverChange = ({| isHover: boolean |}) => void;

type HoverRender = ({|
  isHover: boolean,
  bindHover: {| onMouseEnter: () => void, onMouseLeave: () => void |}
|}) => React.Node;

declare export var Hover: React.ComponentType<
  | {| onChange?: HoverChange, render: HoverRender |}
  | {| onChange?: HoverChange, children: HoverRender |}
>;

/* Index */

type IndexChange = ({| index: number |}) => void;

type IndexRender = ({|
  index: number,
  setIndex: (step: number) => void
|}) => React.Node;

declare export var Index: React.ComponentType<
  | {| initial?: number, onChange?: IndexChange, render: IndexRender |}
  | {| initial?: number, onChange?: IndexChange, children: IndexRender |}
>;

/* List */

type ListChange<T> = ({| list: $ReadOnlyArray<T> |}) => void;

type ListRender<T> = ({|
  list: $ReadOnlyArray<T>,
  setList: ($ReadOnlyArray<T>) => void,
  push: (value: T) => void,
  pull: (predicate: (T) => boolean) => void,
  sort: (compare: (a: T, b: T) => -1 | 0 | 1) => void
|}) => React.Node;

type ListProps<T> =
  | {|
      initial: $ReadOnlyArray<T>,
      onChange?: ListChange<T>,
      render: ListRender<T>
    |}
  | {|
      initial: $ReadOnlyArray<T>,
      onChange?: ListChange<T>,
      children: ListRender<T>
    |};

declare export class List<T> extends React.Component<ListProps<T>, *> {}

/* Loading */

type LoadingChange = ({| isLoading: boolean |}) => void;

type LoadingRender = ({|
  isLoading: boolean,
  toggleLoading: () => void,
  setLoading: (isLoading: boolean) => void
|}) => React.Node;

declare export var Loading: React.ComponentType<
  | {| initial?: boolean, onChange?: LoadingChange, render: LoadingRender |}
  | {| initial?: boolean, onChange?: LoadingChange, children: LoadingRender |}
>;

/* Map */

type MapChange<T> = T => void;

type MapRender<T, K = $Keys<T>> = ({|
  values: T,
  set: (key: K, value: $ElementType<T, K>) => void,
  over: (key: K, fn: ($ElementType<T, K>) => $ElementType<T, K>) => void,
  get: (key: K) => $ElementType<T, K>
|}) => React.Node;

type MapProps<T> =
  | {| initial: T, onChange?: MapChange<T>, render: MapRender<T> |}
  | {| initial: T, onChange?: MapChange<T>, children: MapRender<T> |};

declare export class Map<T: Object> extends React.Component<MapProps<T>, *> {}

/* State */

type StateChange<T> = T => void;

type StateRender<T> = ({|
  state: T,
  setState: (updated: $Shape<T> | (T => $Shape<T>), cb?: () => void) => void
|}) => React.Node;

type StateProps<T> =
  | {| initial: T, onChange?: StateChange<T>, render: StateRender<T> |}
  | {| initial: T, onChange?: StateChange<T>, children: StateRender<T> |};

declare export class State<T: Object> extends React.Component<
  StateProps<T>,
  *
> {}

/* Toggle */

type ToggleChange = ({| on: boolean |}) => void;

type ToggleRender = ({|
  on: boolean,
  off: boolean,
  toggle: () => void,
  setOn: (on: boolean) => void
|}) => React.Node;

declare export var Toggle: React.ComponentType<
  | {| initial?: boolean, onChange?: ToggleChange, render: ToggleRender |}
  | {| initial?: boolean, onChange?: ToggleChange, children: ToggleRender |}
>;

/* Value */

type ValueChange = ({| value: string |}) => void;

type ValueRender = ({|
  value: string,
  setValue: string => void
|}) => React.Node;

declare export var Value: React.ComponentType<
  | {| initial?: string, onChange?: ValueChange, render: ValueRender |}
  | {| initial?: string, onChange?: ValueChange, children: ValueRender |}
>;
