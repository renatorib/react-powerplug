// @flow

import * as React from "react";

type ActiveChange = ({| isActive: boolean |}) => void;

type ActiveRender = ({|
  isActive: boolean,
  bindActive: {| onMouseDown: () => void, onMouseUp: () => void |}
|}) => React.Node;

declare export var Active: React.ComponentType<
  | {| onChange?: ActiveChange, render: ActiveRender |}
  | {| onChange?: ActiveChange, children: ActiveRender |}
>;

type BindChange = ({| value: string |}) => void;

type BindRender = ({|
  value: string,
  setValue: string => void,
  bind: {| value: string, onChange: (SyntheticInputEvent<*>) => void |}
|}) => React.Node;

declare export var Bind: React.ComponentType<
  | {| initial?: string, onChange?: BindChange, render: BindRender |}
  | {| initial?: string, onChange?: BindChange, children: BindRender |}
>;

type CounterChange = ({| count: number |}) => void;

type CounterRender = ({|
  count: number,
  inc: (step?: number) => void,
  dec: (step?: number) => void
|}) => React.Node;

declare export var Counter: React.ComponentType<
  | {| initial?: number, onChange?: CounterChange, render: CounterRender |}
  | {| initial?: number, onChange?: CounterChange, children: CounterRender |}
>;

type FocusChange = ({| isFocus: boolean |}) => void;

type FocusRender = ({|
  isFocus: boolean,
  bindFocus: {| onFocusIn: () => void, onFocusOut: () => void |}
|}) => React.Node;

declare export var Focus: React.ComponentType<
  | {| onChange?: FocusChange, render: FocusRender |}
  | {| onChange?: FocusChange, children: FocusRender |}
>;

type HoverChange = ({| isHover: boolean |}) => void;

type HoverRender = ({|
  isHover: boolean,
  bindHover: {| onMouseEnter: () => void, onMouseLeave: () => void |}
|}) => React.Node;

declare export var Hover: React.ComponentType<
  | {| onChange?: HoverChange, render: HoverRender |}
  | {| onChange?: HoverChange, children: HoverRender |}
>;

